-- Skema SQL v2 untuk Aplikasi Attaqwa Finance dengan Manajemen Kategori

-- HAPUS TABEL LAMA JIKA ADA (untuk pengembangan ulang)
-- Hati-hati: Perintah ini akan menghapus semua data yang ada.
-- DROP TABLE IF EXISTS public.transactions;
-- DROP TABLE IF EXISTS public.categories;

-- 1. Buat tabel untuk Kategori
-- Tabel ini memungkinkan pengguna untuk membuat kategori mereka sendiri untuk pemasukan dan pengeluaran.
CREATE TABLE public.categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  type TEXT NOT NULL CHECK (type IN ('Pemasukan', 'Pengeluaran')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  -- Menambahkan batasan unik untuk mencegah nama kategori yang sama per jenis untuk satu pengguna.
  UNIQUE(user_id, name, type)
);

COMMENT ON TABLE public.categories IS 'Menyimpan kategori yang dapat dikelola pengguna untuk transaksi.';
COMMENT ON COLUMN public.categories.name IS 'Nama kategori, contoh: Zakat Fitrah, Biaya Listrik.';
COMMENT ON COLUMN public.categories.type IS 'Jenis kategori: Pemasukan atau Pengeluaran.';


-- 2. Buat tabel untuk Transaksi (diperbarui)
-- Kolom 'category' diubah menjadi 'category_id' yang merujuk ke tabel kategori.
CREATE TABLE public.transactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  -- Menggunakan foreign key ke tabel categories.
  -- ON DELETE RESTRICT mencegah penghapusan kategori jika masih ada transaksi yang menggunakannya.
  category_id BIGINT REFERENCES public.categories(id) ON DELETE RESTRICT,
  date DATE NOT NULL DEFAULT NOW(),
  description TEXT,
  amount NUMERIC(15, 2) NOT NULL CHECK (amount >= 0),
  type TEXT NOT NULL CHECK (type IN ('Pemasukan', 'Pengeluaran')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.transactions IS 'Mencatat semua transaksi keuangan masjid.';
COMMENT ON COLUMN public.transactions.category_id IS 'Foreign key yang menghubungkan ke tabel public.categories.';


-- 3. Atur Row Level Security (RLS) untuk tabel KATEGORI
-- Memastikan pengguna hanya bisa mengakses kategori miliknya sendiri.
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Pengguna dapat melihat kategorinya sendiri"
ON public.categories FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Pengguna dapat membuat kategori baru"
ON public.categories FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Pengguna dapat mengubah kategorinya sendiri"
ON public.categories FOR UPDATE
USING (auth.uid() = user_id);

CREATE POLICY "Pengguna dapat menghapus kategorinya sendiri"
ON public.categories FOR DELETE
USING (auth.uid() = user_id);


-- 4. Atur Row Level Security (RLS) untuk tabel TRANSAKSI (tidak berubah)
-- Memastikan pengguna hanya bisa mengakses transaksi miliknya sendiri.
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Pengguna dapat melihat transaksinya sendiri"
ON public.transactions FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Pengguna dapat menambahkan transaksi untuk dirinya sendiri"
ON public.transactions FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Pengguna dapat mengubah transaksinya sendiri"
ON public.transactions FOR UPDATE
USING (auth.uid() = user_id);

CREATE POLICY "Pengguna dapat menghapus transaksinya sendiri"
ON public.transactions FOR DELETE
USING (auth.uid() = user_id);


-- 5. (Opsional) Buat fungsi untuk menghitung ringkasan keuangan (tidak berubah)
CREATE OR REPLACE FUNCTION get_financial_summary(user_uuid UUID)
RETURNS TABLE(total_pemasukan NUMERIC, total_pengeluaran NUMERIC, saldo_akhir NUMERIC) AS $$
BEGIN
  RETURN QUERY
  SELECT
    COALESCE(SUM(CASE WHEN type = 'Pemasukan' THEN amount ELSE 0 END), 0) as total_pemasukan,
    COALESCE(SUM(CASE WHEN type = 'Pengeluaran' THEN amount ELSE 0 END), 0) as total_pengeluaran,
    COALESCE(SUM(CASE WHEN type = 'Pemasukan' THEN amount ELSE -amount END), 0) as saldo_akhir
  FROM
    public.transactions
  WHERE
    user_id = user_uuid;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
